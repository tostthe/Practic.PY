"""
–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

–°–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç
—Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
"""

import os
import logging
import numpy as np 
from pathlib import Path

from PyQt5.QtWidgets import (
    QMainWindow, QHBoxLayout, QWidget, QMenuBar,
    QAction, QStatusBar, QMessageBox, QSplitter
)
from PyQt5.QtCore import Qt, pyqtSignal
from PyQt5.QtGui import QFont, QIcon

from .image_viewer import ImageViewer
from .control_panel import ControlPanel
from processing.image_processor import ImageProcessor
from camera.camera_manager import CameraManager
from utils.file_handler import FileHandler
from utils.error_handler import ErrorHandler
from configs.settings import AppSettings

class ImageProcessorWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –°–∏–≥–Ω–∞–ª—ã
    image_loaded = pyqtSignal(object)
    processing_finished = pyqtSignal(object)
    
    def __init__(self):
        super().__init__()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.current_image = None
        self.processed_image = None
        self.camera_manager = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        self.image_processor = ImageProcessor()
        self.file_handler = FileHandler()
        self.error_handler = ErrorHandler()
        self.settings = AppSettings()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.camera_active = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.logger = logging.getLogger(__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.init_ui()
        self.setup_connections()
        
        self.logger.info("–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
    
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
        self.setWindowTitle("üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –û–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞")
        self.setGeometry(100, 100, 1400, 900)
        self.setMinimumSize(1000, 700)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é
        self.create_menu_bar()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
        splitter = QSplitter(Qt.Horizontal)
        central_widget_layout = QHBoxLayout()
        central_widget_layout.addWidget(splitter)
        central_widget.setLayout(central_widget_layout)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.image_viewer = ImageViewer()
        self.control_panel = ControlPanel()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ splitter
        splitter.addWidget(self.image_viewer)
        splitter.addWidget(self.control_panel)
        splitter.setSizes([1000, 400])  # –ü—Ä–æ–ø–æ—Ä—Ü–∏–∏ 70/30
        
        # –°—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.create_status_bar()
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
        self.apply_styles()
    
    def create_menu_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é"""
        
        menubar = self.menuBar()
        
        # –ú–µ–Ω—é "–§–∞–π–ª"
        file_menu = menubar.addMenu('–§–∞–π–ª')
        
        open_action = QAction('–û—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', self)
        open_action.setShortcut('Ctrl+O')
        open_action.triggered.connect(self.load_image)
        file_menu.addAction(open_action)
        
        save_action = QAction('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç', self)
        save_action.setShortcut('Ctrl+S')
        save_action.triggered.connect(self.save_image)
        file_menu.addAction(save_action)
        
        file_menu.addSeparator()
        
        exit_action = QAction('–í—ã—Ö–æ–¥', self)
        exit_action.setShortcut('Ctrl+Q')
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)
        
        # –ú–µ–Ω—é "–ö–∞–º–µ—Ä–∞"
        camera_menu = menubar.addMenu('–ö–∞–º–µ—Ä–∞')
        
        start_camera_action = QAction('–í–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É', self)
        start_camera_action.triggered.connect(self.start_camera)
        camera_menu.addAction(start_camera_action)
        
        stop_camera_action = QAction('–í—ã–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É', self)
        stop_camera_action.triggered.connect(self.stop_camera)
        camera_menu.addAction(stop_camera_action)
        
        capture_action = QAction('–ó–∞—Ö–≤–∞—Ç–∏—Ç—å –∫–∞–¥—Ä', self)
        capture_action.setShortcut('Space')
        capture_action.triggered.connect(self.capture_frame)
        camera_menu.addAction(capture_action)
        
        # –ú–µ–Ω—é "–û–±—Ä–∞–±–æ—Ç–∫–∞"
        processing_menu = menubar.addMenu('–û–±—Ä–∞–±–æ—Ç–∫–∞')
        
        reset_action = QAction('–°–±—Ä–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è', self)
        reset_action.setShortcut('Ctrl+R')
        reset_action.triggered.connect(self.reset_image)
        processing_menu.addAction(reset_action)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        processing_menu.addSeparator()
        
        # –ù–æ–≤—ã–π –ø—É–Ω–∫—Ç: –ü–æ–≤–æ—Ä–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        rotate_action = QAction('–ü–æ–≤–µ—Ä–Ω—É—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', self)
        rotate_action.triggered.connect(self.show_rotate_dialog)
        processing_menu.addAction(rotate_action)
        
        # –ù–æ–≤—ã–π –ø—É–Ω–∫—Ç: –†–∞–∑–º—ã—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        blur_action = QAction('–†–∞–∑–º—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', self)
        blur_action.triggered.connect(self.show_blur_dialog)
        processing_menu.addAction(blur_action)
        
        # –ù–æ–≤—ã–π –ø—É–Ω–∫—Ç: –û–±—Ä–µ–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        crop_action = QAction('–û–±—Ä–µ–∑–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', self)
        crop_action.triggered.connect(self.show_crop_dialog)
        processing_menu.addAction(crop_action)
        
        # –ù–æ–≤—ã–π –ø—É–Ω–∫—Ç: –î–æ–±–∞–≤–∏—Ç—å —á–µ—Ä–Ω—É—é —Ä–∞–º–∫—É
        border_action = QAction('–î–æ–±–∞–≤–∏—Ç—å —á–µ—Ä–Ω—É—é —Ä–∞–º–∫—É', self)
        border_action.triggered.connect(self.show_border_dialog)
        processing_menu.addAction(border_action)
        
        # –ú–µ–Ω—é "–°–ø—Ä–∞–≤–∫–∞"
        help_menu = menubar.addMenu('–°–ø—Ä–∞–≤–∫–∞')
        
        about_action = QAction('–û –ø—Ä–æ–≥—Ä–∞–º–º–µ', self)
        about_action.triggered.connect(self.show_about)
        help_menu.addAction(about_action)
    
    def create_status_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        self.status_bar.showMessage("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    def apply_styles(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        
        self.setStyleSheet("""
            QMainWindow {
                background-color: #f5f5f5;
            }
            QMenuBar {
                background-color: #e1e1e1;
                border-bottom: 1px solid #c0c0c0;
                padding: 2px;
            }
            QMenuBar::item {
                background-color: transparent;
                padding: 4px 8px;
                border-radius: 3px;
            }
            QMenuBar::item:selected {
                background-color: #d0d0d0;
            }
            QStatusBar {
                background-color: #e1e1e1;
                border-top: 1px solid #c0c0c0;
            }
        """)
    
    def setup_connections(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —Å–ª–æ—Ç–æ–≤"""
        
        # –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø–∞–Ω–µ–ª—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.control_panel.load_image_requested.connect(self.load_image)
        self.control_panel.camera_toggle_requested.connect(self.toggle_camera)
        self.control_panel.capture_frame_requested.connect(self.capture_frame)
        self.control_panel.channel_changed.connect(self.change_channel)
        self.control_panel.processing_requested.connect(self.process_image)
        self.control_panel.save_image_requested.connect(self.save_image)
        
        # –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.image_loaded.connect(self.control_panel.on_image_loaded)
        self.processing_finished.connect(self.image_viewer.update_image)
    
    def load_image(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
        
        try:
            file_path = self.file_handler.open_file_dialog(self)
            if file_path:
                self.current_image = self.file_handler.load_image(file_path)
                
                if self.current_image is not None:
                    self.image_viewer.set_image(self.current_image)
                    self.image_loaded.emit(self.current_image)
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                    file_name = Path(file_path).name
                    height, width = self.current_image.shape[:2]
                    self.status_bar.showMessage(
                        f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {file_name} ({width}√ó{height})"
                    )
                    
                    self.logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {file_path}")
                else:
                    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                    
        except Exception as e:
            self.handle_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
    
    def save_image(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ
            image_to_save = self.processed_image if self.processed_image is not None else self.current_image
            
            if image_to_save is None:
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                                  "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                return
            
            file_path = self.file_handler.save_file_dialog(self)
            if file_path:
                success = self.file_handler.save_image(image_to_save, file_path)
                if success:
                    self.status_bar.showMessage(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {Path(file_path).name}")
                    self.logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {file_path}")
                else:
                    raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                
        except Exception as e:
            self.handle_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
    
    def start_camera(self):
        """–ó–∞–ø—É—Å–∫ –∫–∞–º–µ—Ä—ã"""
        
        try:
            if not self.camera_manager:
                self.camera_manager = CameraManager()
                self.camera_manager.frame_ready.connect(self.image_viewer.set_image)
                self.camera_manager.error_occurred.connect(self.handle_camera_error)
                self.camera_manager.camera_started.connect(self.on_camera_started)
                self.camera_manager.camera_stopped.connect(self.on_camera_stopped)
            
            self.camera_manager.start_capture()
            self.camera_active = True
            self.status_bar.showMessage("–ö–∞–º–µ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞")
            self.logger.info("–ö–∞–º–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞")
            
        except Exception as e:
            self.handle_error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–µ—Ä—ã: {str(e)}")

    def on_camera_started(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–µ—Ä—ã"""

        self.control_panel.on_camera_started()
        self.camera_active = True
    
    def on_camera_stopped(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–º–µ—Ä—ã"""
        
        self.control_panel.on_camera_stopped()
        self.camera_active = False
    
    def stop_camera(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–º–µ—Ä—ã"""
        
        try:
            if self.camera_manager:
                self.camera_manager.stop_capture()
            
            self.camera_active = False
            self.status_bar.showMessage("–ö–∞–º–µ—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞")
            self.logger.info("–ö–∞–º–µ—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            self.handle_error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–º–µ—Ä—ã: {str(e)}")
    
    def toggle_camera(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–º–µ—Ä—ã"""
        
        if self.camera_active:
            self.stop_camera()
        else:
            self.start_camera()
    
    def capture_frame(self):
        """–ó–∞—Ö–≤–∞—Ç –∫–∞–¥—Ä–∞ —Å –∫–∞–º–µ—Ä—ã"""
        
        try:
            if self.camera_manager and self.camera_active:
                frame = self.camera_manager.capture_single_frame()
                if frame is not None:
                    self.current_image = frame.copy()
                    self.image_viewer.set_image(self.current_image)
                    self.image_loaded.emit(self.current_image)
                    self.status_bar.showMessage("–ö–∞–¥—Ä –∑–∞—Ö–≤–∞—á–µ–Ω")
                    self.logger.info("–ö–∞–¥—Ä –∑–∞—Ö–≤–∞—á–µ–Ω —Å –∫–∞–º–µ—Ä—ã")
                else:
                    QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                                      "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –∫–∞–¥—Ä")
            else:
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                                  "–ö–∞–º–µ—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
                
        except Exception as e:
            self.handle_error(f"–û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–¥—Ä–∞: {str(e)}")
    
    def change_channel(self, channel):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ RGB –∫–∞–Ω–∞–ª–∞"""

        try:
            # –ë–µ—Ä–µ–º —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ)
            current_img = self.processed_image if self.processed_image is not None else self.current_image
            
            if current_img is None:
                return
            
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_image = self.image_processor.create_channel_display(current_img, channel)
            self.image_viewer.set_image(display_image)
            
            self.status_bar.showMessage(f"–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è: {channel}")
            
        except Exception as e:
            self.handle_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–∞–ª–∞: {str(e)}")
        
    def process_image(self, function_name, parameters):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π"""

        try:
            # –î–ª—è —Å–±—Ä–æ—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if function_name == 'reset':
                current_img = self.current_image
            else:
                # –ë–µ—Ä–µ–º —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ)
                current_img = self.processed_image if self.processed_image is not None else self.current_image
            
            if current_img is None:
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                                "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return
            
            # –î–ª—è —Å–±—Ä–æ—Å–∞ –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
            if function_name == 'reset':
                self.processed_image = None
                self.image_viewer.set_image(self.current_image)
                self.status_bar.showMessage("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã")
                self.control_panel.reset_controls()
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            process_function = getattr(self.image_processor, function_name, None)
            if process_function is None:
                raise ValueError(f"–§—É–Ω–∫—Ü–∏—è {function_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self.processed_image = process_function(current_img, **parameters)
            self.image_viewer.set_image(self.processed_image)
            self.processing_finished.emit(self.processed_image)
            
            self.status_bar.showMessage(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞: {function_name}")
            self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {function_name}")
            
        except Exception as e:
            self.handle_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
    
    def reset_image(self):
        """–°–±—Ä–æ—Å –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é"""
        
        if self.current_image is not None:
            self.processed_image = None
            self.image_viewer.set_image(self.current_image)
            self.status_bar.showMessage("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã")
            self.control_panel.reset_controls()
    
    def handle_error(self, error_message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        
        self.logger.error(error_message)
        QMessageBox.critical(self, "–û—à–∏–±–∫–∞", error_message)
        self.status_bar.showMessage("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏")
    
    def handle_camera_error(self, error_message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∫–∞–º–µ—Ä—ã"""
        
        self.logger.error(f"–û—à–∏–±–∫–∞ –∫–∞–º–µ—Ä—ã: {error_message}")
        QMessageBox.warning(self, "–û—à–∏–±–∫–∞ –∫–∞–º–µ—Ä—ã", error_message)
        self.camera_active = False
        self.status_bar.showMessage("–û—à–∏–±–∫–∞ –∫–∞–º–µ—Ä—ã")
    
    def show_rotate_dialog(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –ø–æ–≤–æ—Ä–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        self.control_panel.rotate_image_dialog()
    
    def show_blur_dialog(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Ä–∞–∑–º—ã—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        self.control_panel.apply_blur_dialog()
    
    def show_crop_dialog(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –æ–±—Ä–µ–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        self.control_panel.crop_image_dialog()
    
    def show_border_dialog(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–Ω–æ–π —Ä–∞–º–∫–∏"""
        self.control_panel.add_border_dialog()
    
    def show_about(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        
        about_text = """
        <h3>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</h3>
        <p><b>–í–µ—Ä—Å–∏—è:</b> 1.0</p>
        <p><b>–ê–≤—Ç–æ—Ä:</b> –ò–ª—å—è –ü–æ–ø–æ–≤ –ï–≤–≥–µ–Ω—å–µ–≤–∏—á</p>
        <p><b>–ì—Ä—É–ø–ø–∞:</b> –ó–ö–ò24-16–ë</p>
        <p><b>–í–∞—Ä–∏–∞–Ω—Ç:</b> 17 –í—ã—Ä–∏–∞–Ω—Ç</p>
        <br>
        <p>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏.</p>
        <p>–í–∫–ª—é—á–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏, RGB –∫–∞–Ω–∞–ª–∞–º–∏ –∏ –≤–µ–±-–∫–∞–º–µ—Ä–æ–π.</p>
        """
        
        QMessageBox.about(self, "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", about_text)
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–º–µ—Ä—ã –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
        if self.camera_active:
            self.stop_camera()
        
        self.logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        event.accept()
